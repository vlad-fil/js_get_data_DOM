{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCIA,IAAM,EAAO,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,E,EAFO,SAAS,gBAAgB,CAAC,iB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAEhB,GAAG,CAAC,SAAC,CAAnC,EAA4C,OAAA,EAAK,SAAS,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,G,GACvE,EAAQ,EAEP,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,I,EAAK,EAAA,EAAc,CAAA,CAAA,OAAA,QAAA,CAAA,GAAd,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,CACH,GAAS,CAAC,C,C,C,M,E,CADP,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,IAAM,EAAU,EAAQ,EAAK,MAAM,CAC7B,EAAc,EAAM,cAAc,CAAC,SACnC,EAAgB,EAAQ,cAAc,CAAC,QAG7C,CAFwB,SAAS,aAAa,CAAC,qBAE/B,WAAW,CAAG,EAI9B,AAF0B,SAAS,aAAa,CAAC,uBAE/B,WAAW,CAAG","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar populations = document.querySelectorAll(\".population\");\nvar list = _to_consumable_array(populations).map(function(item) {\n    return item.innerHTML.split(\",\").join(\"\");\n});\nvar total = 0;\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var item = _step.value;\n        total += +item;\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\nvar average = total / list.length;\nvar totalFormat = total.toLocaleString(\"en-US\");\nvar averageFormat = average.toLocaleString(\"en-US\");\nvar totalPopulation = document.querySelector(\".total-population\");\ntotalPopulation.textContent = totalFormat;\nvar averagePopulation = document.querySelector(\".average-population\");\naveragePopulation.textContent = averageFormat;\n\n//# sourceMappingURL=index.f2f78dbb.js.map\n","'use strict';\n\nconst populations = document.querySelectorAll('.population');\n\nconst list = [...populations].map((item) => item.innerHTML.split(',').join(''));\nlet total = 0;\n\nfor (const item of list) {\n  total += +item;\n}\n\nconst average = total / list.length;\nconst totalFormat = total.toLocaleString('en-US');\nconst averageFormat = average.toLocaleString('en-US');\nconst totalPopulation = document.querySelector('.total-population');\n\ntotalPopulation.textContent = totalFormat;\n\nconst averagePopulation = document.querySelector('.average-population');\n\naveragePopulation.textContent = averageFormat;\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","list","_to_consumable_array","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","map","item","innerHTML","split","join","total","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","value","err","return","average","totalFormat","toLocaleString","averageFormat","totalPopulation","querySelector","textContent","averagePopulation"],"version":3,"file":"index.f2f78dbb.js.map"}